{"version":3,"file":"rc-tree-select.7fd57c0e.js","sources":["../../../node_modules/.pnpm/rc-tree-select@5.6.0_biqbaboplfbrettd7655fr4n2y/node_modules/rc-tree-select/es/LegacyContext.js","../../../node_modules/.pnpm/rc-tree-select@5.6.0_biqbaboplfbrettd7655fr4n2y/node_modules/rc-tree-select/es/TreeSelectContext.js","../../../node_modules/.pnpm/rc-tree-select@5.6.0_biqbaboplfbrettd7655fr4n2y/node_modules/rc-tree-select/es/utils/valueUtil.js","../../../node_modules/.pnpm/rc-tree-select@5.6.0_biqbaboplfbrettd7655fr4n2y/node_modules/rc-tree-select/es/OptionList.js","../../../node_modules/.pnpm/rc-tree-select@5.6.0_biqbaboplfbrettd7655fr4n2y/node_modules/rc-tree-select/es/TreeNode.js","../../../node_modules/.pnpm/rc-tree-select@5.6.0_biqbaboplfbrettd7655fr4n2y/node_modules/rc-tree-select/es/utils/strategyUtil.js","../../../node_modules/.pnpm/rc-tree-select@5.6.0_biqbaboplfbrettd7655fr4n2y/node_modules/rc-tree-select/es/utils/legacyUtil.js","../../../node_modules/.pnpm/rc-tree-select@5.6.0_biqbaboplfbrettd7655fr4n2y/node_modules/rc-tree-select/es/hooks/useTreeData.js","../../../node_modules/.pnpm/rc-tree-select@5.6.0_biqbaboplfbrettd7655fr4n2y/node_modules/rc-tree-select/es/hooks/useCache.js","../../../node_modules/.pnpm/rc-tree-select@5.6.0_biqbaboplfbrettd7655fr4n2y/node_modules/rc-tree-select/es/hooks/useRefFunc.js","../../../node_modules/.pnpm/rc-tree-select@5.6.0_biqbaboplfbrettd7655fr4n2y/node_modules/rc-tree-select/es/hooks/useDataEntities.js","../../../node_modules/.pnpm/rc-tree-select@5.6.0_biqbaboplfbrettd7655fr4n2y/node_modules/rc-tree-select/es/hooks/useCheckedKeys.js","../../../node_modules/.pnpm/rc-tree-select@5.6.0_biqbaboplfbrettd7655fr4n2y/node_modules/rc-tree-select/es/hooks/useFilterTreeData.js","../../../node_modules/.pnpm/rc-tree-select@5.6.0_biqbaboplfbrettd7655fr4n2y/node_modules/rc-tree-select/es/TreeSelect.js"],"sourcesContent":["import * as React from 'react';\nvar LegacySelectContext = /*#__PURE__*/React.createContext(null);\nexport default LegacySelectContext;","import * as React from 'react';\nvar TreeSelectContext = /*#__PURE__*/React.createContext(null);\nexport default TreeSelectContext;","export function toArray(value) {\n  if (Array.isArray(value)) {\n    return value;\n  }\n\n  return value !== undefined ? [value] : [];\n}\nexport function fillFieldNames(fieldNames) {\n  var _ref = fieldNames || {},\n      label = _ref.label,\n      value = _ref.value,\n      children = _ref.children;\n\n  var mergedValue = value || 'value';\n  return {\n    _title: label ? [label] : ['title', 'label'],\n    value: mergedValue,\n    key: mergedValue,\n    children: children || 'children'\n  };\n}\nexport function isCheckDisabled(node) {\n  return !node || node.disabled || node.disableCheckbox || node.checkable === false;\n}\n/** Loop fetch all the keys exist in the tree */\n\nexport function getAllKeys(treeData, fieldNames) {\n  var keys = [];\n\n  function dig(list) {\n    list.forEach(function (item) {\n      var children = item[fieldNames.children];\n\n      if (children) {\n        keys.push(item[fieldNames.value]);\n        dig(children);\n      }\n    });\n  }\n\n  dig(treeData);\n  return keys;\n}\nexport function isNil(val) {\n  return val === null || val === undefined;\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport useMemo from \"rc-util/es/hooks/useMemo\";\nimport { useBaseProps } from 'rc-select';\nimport Tree from 'rc-tree';\nimport LegacyContext from \"./LegacyContext\";\nimport TreeSelectContext from \"./TreeSelectContext\";\nimport { getAllKeys, isCheckDisabled } from \"./utils/valueUtil\";\nvar HIDDEN_STYLE = {\n  width: 0,\n  height: 0,\n  display: 'flex',\n  overflow: 'hidden',\n  opacity: 0,\n  border: 0,\n  padding: 0,\n  margin: 0\n};\n\nvar OptionList = function OptionList(_, ref) {\n  var _useBaseProps = useBaseProps(),\n      prefixCls = _useBaseProps.prefixCls,\n      multiple = _useBaseProps.multiple,\n      searchValue = _useBaseProps.searchValue,\n      toggleOpen = _useBaseProps.toggleOpen,\n      open = _useBaseProps.open,\n      notFoundContent = _useBaseProps.notFoundContent;\n\n  var _React$useContext = React.useContext(TreeSelectContext),\n      virtual = _React$useContext.virtual,\n      listHeight = _React$useContext.listHeight,\n      listItemHeight = _React$useContext.listItemHeight,\n      treeData = _React$useContext.treeData,\n      fieldNames = _React$useContext.fieldNames,\n      onSelect = _React$useContext.onSelect,\n      dropdownMatchSelectWidth = _React$useContext.dropdownMatchSelectWidth,\n      treeExpandAction = _React$useContext.treeExpandAction;\n\n  var _React$useContext2 = React.useContext(LegacyContext),\n      checkable = _React$useContext2.checkable,\n      checkedKeys = _React$useContext2.checkedKeys,\n      halfCheckedKeys = _React$useContext2.halfCheckedKeys,\n      treeExpandedKeys = _React$useContext2.treeExpandedKeys,\n      treeDefaultExpandAll = _React$useContext2.treeDefaultExpandAll,\n      treeDefaultExpandedKeys = _React$useContext2.treeDefaultExpandedKeys,\n      onTreeExpand = _React$useContext2.onTreeExpand,\n      treeIcon = _React$useContext2.treeIcon,\n      showTreeIcon = _React$useContext2.showTreeIcon,\n      switcherIcon = _React$useContext2.switcherIcon,\n      treeLine = _React$useContext2.treeLine,\n      treeNodeFilterProp = _React$useContext2.treeNodeFilterProp,\n      loadData = _React$useContext2.loadData,\n      treeLoadedKeys = _React$useContext2.treeLoadedKeys,\n      treeMotion = _React$useContext2.treeMotion,\n      onTreeLoad = _React$useContext2.onTreeLoad,\n      keyEntities = _React$useContext2.keyEntities;\n\n  var treeRef = React.useRef();\n  var memoTreeData = useMemo(function () {\n    return treeData;\n  }, [open, treeData], function (prev, next) {\n    return next[0] && prev[1] !== next[1];\n  }); // ========================== Values ==========================\n\n  var mergedCheckedKeys = React.useMemo(function () {\n    if (!checkable) {\n      return null;\n    }\n\n    return {\n      checked: checkedKeys,\n      halfChecked: halfCheckedKeys\n    };\n  }, [checkable, checkedKeys, halfCheckedKeys]); // ========================== Scroll ==========================\n\n  React.useEffect(function () {\n    // Single mode should scroll to current key\n    if (open && !multiple && checkedKeys.length) {\n      var _treeRef$current;\n\n      (_treeRef$current = treeRef.current) === null || _treeRef$current === void 0 ? void 0 : _treeRef$current.scrollTo({\n        key: checkedKeys[0]\n      });\n    }\n  }, [open]); // ========================== Search ==========================\n\n  var lowerSearchValue = String(searchValue).toLowerCase();\n\n  var filterTreeNode = function filterTreeNode(treeNode) {\n    if (!lowerSearchValue) {\n      return false;\n    }\n\n    return String(treeNode[treeNodeFilterProp]).toLowerCase().includes(lowerSearchValue);\n  }; // =========================== Keys ===========================\n\n\n  var _React$useState = React.useState(treeDefaultExpandedKeys),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      expandedKeys = _React$useState2[0],\n      setExpandedKeys = _React$useState2[1];\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      searchExpandedKeys = _React$useState4[0],\n      setSearchExpandedKeys = _React$useState4[1];\n\n  var mergedExpandedKeys = React.useMemo(function () {\n    if (treeExpandedKeys) {\n      return _toConsumableArray(treeExpandedKeys);\n    }\n\n    return searchValue ? searchExpandedKeys : expandedKeys;\n  }, [expandedKeys, searchExpandedKeys, treeExpandedKeys, searchValue]);\n  React.useEffect(function () {\n    if (searchValue) {\n      setSearchExpandedKeys(getAllKeys(treeData, fieldNames));\n    }\n  }, [searchValue]);\n\n  var onInternalExpand = function onInternalExpand(keys) {\n    setExpandedKeys(keys);\n    setSearchExpandedKeys(keys);\n\n    if (onTreeExpand) {\n      onTreeExpand(keys);\n    }\n  }; // ========================== Events ==========================\n\n\n  var onListMouseDown = function onListMouseDown(event) {\n    event.preventDefault();\n  };\n\n  var onInternalSelect = function onInternalSelect(__, info) {\n    var node = info.node;\n\n    if (checkable && isCheckDisabled(node)) {\n      return;\n    }\n\n    onSelect(node.key, {\n      selected: !checkedKeys.includes(node.key)\n    });\n\n    if (!multiple) {\n      toggleOpen(false);\n    }\n  }; // ========================= Keyboard =========================\n\n\n  var _React$useState5 = React.useState(null),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      activeKey = _React$useState6[0],\n      setActiveKey = _React$useState6[1];\n\n  var activeEntity = keyEntities[activeKey];\n  React.useImperativeHandle(ref, function () {\n    var _treeRef$current2;\n\n    return {\n      scrollTo: (_treeRef$current2 = treeRef.current) === null || _treeRef$current2 === void 0 ? void 0 : _treeRef$current2.scrollTo,\n      onKeyDown: function onKeyDown(event) {\n        var _treeRef$current3;\n\n        var which = event.which;\n\n        switch (which) {\n          // >>> Arrow keys\n          case KeyCode.UP:\n          case KeyCode.DOWN:\n          case KeyCode.LEFT:\n          case KeyCode.RIGHT:\n            (_treeRef$current3 = treeRef.current) === null || _treeRef$current3 === void 0 ? void 0 : _treeRef$current3.onKeyDown(event);\n            break;\n          // >>> Select item\n\n          case KeyCode.ENTER:\n            {\n              if (activeEntity) {\n                var _ref = (activeEntity === null || activeEntity === void 0 ? void 0 : activeEntity.node) || {},\n                    selectable = _ref.selectable,\n                    value = _ref.value;\n\n                if (selectable !== false) {\n                  onInternalSelect(null, {\n                    node: {\n                      key: activeKey\n                    },\n                    selected: !checkedKeys.includes(value)\n                  });\n                }\n              }\n\n              break;\n            }\n          // >>> Close\n\n          case KeyCode.ESC:\n            {\n              toggleOpen(false);\n            }\n        }\n      },\n      onKeyUp: function onKeyUp() {}\n    };\n  }); // ========================== Render ==========================\n\n  if (memoTreeData.length === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      role: \"listbox\",\n      className: \"\".concat(prefixCls, \"-empty\"),\n      onMouseDown: onListMouseDown\n    }, notFoundContent);\n  }\n\n  var treeProps = {\n    fieldNames: fieldNames\n  };\n\n  if (treeLoadedKeys) {\n    treeProps.loadedKeys = treeLoadedKeys;\n  }\n\n  if (mergedExpandedKeys) {\n    treeProps.expandedKeys = mergedExpandedKeys;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    onMouseDown: onListMouseDown\n  }, activeEntity && open && /*#__PURE__*/React.createElement(\"span\", {\n    style: HIDDEN_STYLE,\n    \"aria-live\": \"assertive\"\n  }, activeEntity.node.value), /*#__PURE__*/React.createElement(Tree, _extends({\n    ref: treeRef,\n    focusable: false,\n    prefixCls: \"\".concat(prefixCls, \"-tree\"),\n    treeData: memoTreeData,\n    height: listHeight,\n    itemHeight: listItemHeight,\n    virtual: virtual !== false && dropdownMatchSelectWidth !== false,\n    multiple: multiple,\n    icon: treeIcon,\n    showIcon: showTreeIcon,\n    switcherIcon: switcherIcon,\n    showLine: treeLine,\n    loadData: searchValue ? null : loadData,\n    motion: treeMotion,\n    activeKey: activeKey // We handle keys by out instead tree self\n    ,\n    checkable: checkable,\n    checkStrictly: true,\n    checkedKeys: mergedCheckedKeys,\n    selectedKeys: !checkable ? checkedKeys : [],\n    defaultExpandAll: treeDefaultExpandAll\n  }, treeProps, {\n    // Proxy event out\n    onActiveChange: setActiveKey,\n    onSelect: onInternalSelect,\n    onCheck: onInternalSelect,\n    onExpand: onInternalExpand,\n    onLoad: onTreeLoad,\n    filterTreeNode: filterTreeNode,\n    expandAction: treeExpandAction\n  })));\n};\n\nvar RefOptionList = /*#__PURE__*/React.forwardRef(OptionList);\nRefOptionList.displayName = 'OptionList';\nexport default RefOptionList;","/* istanbul ignore file */\n\n/** This is a placeholder, not real render in dom */\nvar TreeNode = function TreeNode() {\n  return null;\n};\n\nexport default TreeNode;","import { isCheckDisabled } from \"./valueUtil\";\nexport var SHOW_ALL = 'SHOW_ALL';\nexport var SHOW_PARENT = 'SHOW_PARENT';\nexport var SHOW_CHILD = 'SHOW_CHILD';\nexport function formatStrategyValues(values, strategy, keyEntities, fieldNames) {\n  var valueSet = new Set(values);\n\n  if (strategy === SHOW_CHILD) {\n    return values.filter(function (key) {\n      var entity = keyEntities[key];\n\n      if (entity && entity.children && entity.children.some(function (_ref) {\n        var node = _ref.node;\n        return valueSet.has(node[fieldNames.value]);\n      }) && entity.children.every(function (_ref2) {\n        var node = _ref2.node;\n        return isCheckDisabled(node) || valueSet.has(node[fieldNames.value]);\n      })) {\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  if (strategy === SHOW_PARENT) {\n    return values.filter(function (key) {\n      var entity = keyEntities[key];\n      var parent = entity ? entity.parent : null;\n\n      if (parent && !isCheckDisabled(parent.node) && valueSet.has(parent.key)) {\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  return values;\n}","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"children\", \"value\"];\nimport * as React from 'react';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport warning from \"rc-util/es/warning\";\nimport TreeNode from \"../TreeNode\";\nexport function convertChildrenToData(nodes) {\n  return toArray(nodes).map(function (node) {\n    if (! /*#__PURE__*/React.isValidElement(node) || !node.type) {\n      return null;\n    }\n\n    var _ref = node,\n        key = _ref.key,\n        _ref$props = _ref.props,\n        children = _ref$props.children,\n        value = _ref$props.value,\n        restProps = _objectWithoutProperties(_ref$props, _excluded);\n\n    var data = _objectSpread({\n      key: key,\n      value: value\n    }, restProps);\n\n    var childData = convertChildrenToData(children);\n\n    if (childData.length) {\n      data.children = childData;\n    }\n\n    return data;\n  }).filter(function (data) {\n    return data;\n  });\n}\nexport function fillLegacyProps(dataNode) {\n  if (!dataNode) {\n    return dataNode;\n  }\n\n  var cloneNode = _objectSpread({}, dataNode);\n\n  if (!('props' in cloneNode)) {\n    Object.defineProperty(cloneNode, 'props', {\n      get: function get() {\n        warning(false, 'New `rc-tree-select` not support return node instance as argument anymore. Please consider to remove `props` access.');\n        return cloneNode;\n      }\n    });\n  }\n\n  return cloneNode;\n}\nexport function fillAdditionalInfo(extra, triggerValue, checkedValues, treeData, showPosition, fieldNames) {\n  var triggerNode = null;\n  var nodeList = null;\n\n  function generateMap() {\n    function dig(list) {\n      var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '0';\n      var parentIncluded = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      return list.map(function (option, index) {\n        var pos = \"\".concat(level, \"-\").concat(index);\n        var value = option[fieldNames.value];\n        var included = checkedValues.includes(value);\n        var children = dig(option[fieldNames.children] || [], pos, included);\n        var node = /*#__PURE__*/React.createElement(TreeNode, option, children.map(function (child) {\n          return child.node;\n        })); // Link with trigger node\n\n        if (triggerValue === value) {\n          triggerNode = node;\n        }\n\n        if (included) {\n          var checkedNode = {\n            pos: pos,\n            node: node,\n            children: children\n          };\n\n          if (!parentIncluded) {\n            nodeList.push(checkedNode);\n          }\n\n          return checkedNode;\n        }\n\n        return null;\n      }).filter(function (node) {\n        return node;\n      });\n    }\n\n    if (!nodeList) {\n      nodeList = [];\n      dig(treeData); // Sort to keep the checked node length\n\n      nodeList.sort(function (_ref2, _ref3) {\n        var val1 = _ref2.node.props.value;\n        var val2 = _ref3.node.props.value;\n        var index1 = checkedValues.indexOf(val1);\n        var index2 = checkedValues.indexOf(val2);\n        return index1 - index2;\n      });\n    }\n  }\n\n  Object.defineProperty(extra, 'triggerNode', {\n    get: function get() {\n      warning(false, '`triggerNode` is deprecated. Please consider decoupling data with node.');\n      generateMap();\n      return triggerNode;\n    }\n  });\n  Object.defineProperty(extra, 'allCheckedNodes', {\n    get: function get() {\n      warning(false, '`allCheckedNodes` is deprecated. Please consider decoupling data with node.');\n      generateMap();\n\n      if (showPosition) {\n        return nodeList;\n      }\n\n      return nodeList.map(function (_ref4) {\n        var node = _ref4.node;\n        return node;\n      });\n    }\n  });\n}","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport * as React from 'react';\nimport { convertChildrenToData } from \"../utils/legacyUtil\";\n\nfunction parseSimpleTreeData(treeData, _ref) {\n  var id = _ref.id,\n      pId = _ref.pId,\n      rootPId = _ref.rootPId;\n  var keyNodes = {};\n  var rootNodeList = []; // Fill in the map\n\n  var nodeList = treeData.map(function (node) {\n    var clone = _objectSpread({}, node);\n\n    var key = clone[id];\n    keyNodes[key] = clone;\n    clone.key = clone.key || key;\n    return clone;\n  }); // Connect tree\n\n  nodeList.forEach(function (node) {\n    var parentKey = node[pId];\n    var parent = keyNodes[parentKey]; // Fill parent\n\n    if (parent) {\n      parent.children = parent.children || [];\n      parent.children.push(node);\n    } // Fill root tree node\n\n\n    if (parentKey === rootPId || !parent && rootPId === null) {\n      rootNodeList.push(node);\n    }\n  });\n  return rootNodeList;\n}\n/**\n * Convert `treeData` or `children` into formatted `treeData`.\n * Will not re-calculate if `treeData` or `children` not change.\n */\n\n\nexport default function useTreeData(treeData, children, simpleMode) {\n  return React.useMemo(function () {\n    if (treeData) {\n      return simpleMode ? parseSimpleTreeData(treeData, _objectSpread({\n        id: 'id',\n        pId: 'pId',\n        rootPId: null\n      }, simpleMode !== true ? simpleMode : {})) : treeData;\n    }\n\n    return convertChildrenToData(children);\n  }, [children, simpleMode, treeData]);\n}","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport * as React from 'react';\n\n/**\n * This function will try to call requestIdleCallback if available to save performance.\n * No need `getLabel` here since already fetch on `rawLabeledValue`.\n */\nexport default (function (values) {\n  var cacheRef = React.useRef({\n    valueLabels: new Map()\n  });\n  return React.useMemo(function () {\n    var valueLabels = cacheRef.current.valueLabels;\n    var valueLabelsCache = new Map();\n    var filledValues = values.map(function (item) {\n      var _item$label;\n\n      var value = item.value;\n      var mergedLabel = (_item$label = item.label) !== null && _item$label !== void 0 ? _item$label : valueLabels.get(value); // Save in cache\n\n      valueLabelsCache.set(value, mergedLabel);\n      return _objectSpread(_objectSpread({}, item), {}, {\n        label: mergedLabel\n      });\n    });\n    cacheRef.current.valueLabels = valueLabelsCache;\n    return [filledValues];\n  }, [values]);\n});","import * as React from 'react';\n/**\n * Same as `React.useCallback` but always return a memoized function\n * but redirect to real function.\n */\n\nexport default function useRefFunc(callback) {\n  var funcRef = React.useRef();\n  funcRef.current = callback;\n  var cacheFn = React.useCallback(function () {\n    return funcRef.current.apply(funcRef, arguments);\n  }, []);\n  return cacheFn;\n}","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport * as React from 'react';\nimport { convertDataToEntities } from \"rc-tree/es/utils/treeUtil\";\nimport warning from \"rc-util/es/warning\";\nimport { isNil } from \"../utils/valueUtil\";\nexport default (function (treeData, fieldNames) {\n  return React.useMemo(function () {\n    var collection = convertDataToEntities(treeData, {\n      fieldNames: fieldNames,\n      initWrapper: function initWrapper(wrapper) {\n        return _objectSpread(_objectSpread({}, wrapper), {}, {\n          valueEntities: new Map()\n        });\n      },\n      processEntity: function processEntity(entity, wrapper) {\n        var val = entity.node[fieldNames.value]; // Check if exist same value\n\n        if (process.env.NODE_ENV !== 'production') {\n          var key = entity.node.key;\n          warning(!isNil(val), 'TreeNode `value` is invalidate: undefined');\n          warning(!wrapper.valueEntities.has(val), \"Same `value` exist in the tree: \".concat(val));\n          warning(!key || String(key) === String(val), \"`key` or `value` with TreeNode must be the same or you can remove one of them. key: \".concat(key, \", value: \").concat(val, \".\"));\n        }\n\n        wrapper.valueEntities.set(val, entity);\n      }\n    });\n    return collection;\n  }, [treeData, fieldNames]);\n});","import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nexport default (function (rawLabeledValues, rawHalfCheckedValues, treeConduction, keyEntities) {\n  return React.useMemo(function () {\n    var checkedKeys = rawLabeledValues.map(function (_ref) {\n      var value = _ref.value;\n      return value;\n    });\n    var halfCheckedKeys = rawHalfCheckedValues.map(function (_ref2) {\n      var value = _ref2.value;\n      return value;\n    });\n    var missingValues = checkedKeys.filter(function (key) {\n      return !keyEntities[key];\n    });\n\n    if (treeConduction) {\n      var _conductCheck = conductCheck(checkedKeys, true, keyEntities);\n\n      checkedKeys = _conductCheck.checkedKeys;\n      halfCheckedKeys = _conductCheck.halfCheckedKeys;\n    }\n\n    return [// Checked keys should fill with missing keys which should de-duplicated\n    Array.from(new Set([].concat(_toConsumableArray(missingValues), _toConsumableArray(checkedKeys)))), // Half checked keys\n    halfCheckedKeys];\n  }, [rawLabeledValues, rawHalfCheckedValues, treeConduction, keyEntities]);\n});","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport * as React from 'react';\nimport { fillLegacyProps } from \"../utils/legacyUtil\";\nexport default (function (treeData, searchValue, _ref) {\n  var treeNodeFilterProp = _ref.treeNodeFilterProp,\n      filterTreeNode = _ref.filterTreeNode,\n      fieldNames = _ref.fieldNames;\n  var fieldChildren = fieldNames.children;\n  return React.useMemo(function () {\n    if (!searchValue || filterTreeNode === false) {\n      return treeData;\n    }\n\n    var filterOptionFunc;\n\n    if (typeof filterTreeNode === 'function') {\n      filterOptionFunc = filterTreeNode;\n    } else {\n      var upperStr = searchValue.toUpperCase();\n\n      filterOptionFunc = function filterOptionFunc(_, dataNode) {\n        var value = dataNode[treeNodeFilterProp];\n        return String(value).toUpperCase().includes(upperStr);\n      };\n    }\n\n    function dig(list) {\n      var keepAll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return list.map(function (dataNode) {\n        var children = dataNode[fieldChildren];\n        var match = keepAll || filterOptionFunc(searchValue, fillLegacyProps(dataNode));\n        var childList = dig(children || [], match);\n\n        if (match || childList.length) {\n          return _objectSpread(_objectSpread({}, dataNode), {}, _defineProperty({\n            isLeaf: undefined\n          }, fieldChildren, childList));\n        }\n\n        return null;\n      }).filter(function (node) {\n        return node;\n      });\n    }\n\n    return dig(treeData);\n  }, [treeData, searchValue, fieldChildren, treeNodeFilterProp, filterTreeNode]);\n});","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nvar _excluded = [\"id\", \"prefixCls\", \"value\", \"defaultValue\", \"onChange\", \"onSelect\", \"onDeselect\", \"searchValue\", \"inputValue\", \"onSearch\", \"autoClearSearchValue\", \"filterTreeNode\", \"treeNodeFilterProp\", \"showCheckedStrategy\", \"treeNodeLabelProp\", \"multiple\", \"treeCheckable\", \"treeCheckStrictly\", \"labelInValue\", \"fieldNames\", \"treeDataSimpleMode\", \"treeData\", \"children\", \"loadData\", \"treeLoadedKeys\", \"onTreeLoad\", \"treeDefaultExpandAll\", \"treeExpandedKeys\", \"treeDefaultExpandedKeys\", \"onTreeExpand\", \"treeExpandAction\", \"virtual\", \"listHeight\", \"listItemHeight\", \"onDropdownVisibleChange\", \"dropdownMatchSelectWidth\", \"treeLine\", \"treeIcon\", \"showTreeIcon\", \"switcherIcon\", \"treeMotion\"];\nimport * as React from 'react';\nimport { BaseSelect } from 'rc-select';\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport useId from \"rc-select/es/hooks/useId\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport OptionList from \"./OptionList\";\nimport TreeNode from \"./TreeNode\";\nimport { formatStrategyValues, SHOW_ALL, SHOW_PARENT, SHOW_CHILD } from \"./utils/strategyUtil\";\nimport TreeSelectContext from \"./TreeSelectContext\";\nimport LegacyContext from \"./LegacyContext\";\nimport useTreeData from \"./hooks/useTreeData\";\nimport { toArray, fillFieldNames, isNil } from \"./utils/valueUtil\";\nimport useCache from \"./hooks/useCache\";\nimport useRefFunc from \"./hooks/useRefFunc\";\nimport useDataEntities from \"./hooks/useDataEntities\";\nimport { fillAdditionalInfo, fillLegacyProps } from \"./utils/legacyUtil\";\nimport useCheckedKeys from \"./hooks/useCheckedKeys\";\nimport useFilterTreeData from \"./hooks/useFilterTreeData\";\nimport warningProps from \"./utils/warningPropsUtil\";\nimport warning from \"rc-util/es/warning\";\n\nfunction isRawValue(value) {\n  return !value || _typeof(value) !== 'object';\n}\n\nvar TreeSelect = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var id = props.id,\n      _props$prefixCls = props.prefixCls,\n      prefixCls = _props$prefixCls === void 0 ? 'rc-tree-select' : _props$prefixCls,\n      value = props.value,\n      defaultValue = props.defaultValue,\n      onChange = props.onChange,\n      onSelect = props.onSelect,\n      onDeselect = props.onDeselect,\n      searchValue = props.searchValue,\n      inputValue = props.inputValue,\n      onSearch = props.onSearch,\n      _props$autoClearSearc = props.autoClearSearchValue,\n      autoClearSearchValue = _props$autoClearSearc === void 0 ? true : _props$autoClearSearc,\n      filterTreeNode = props.filterTreeNode,\n      _props$treeNodeFilter = props.treeNodeFilterProp,\n      treeNodeFilterProp = _props$treeNodeFilter === void 0 ? 'value' : _props$treeNodeFilter,\n      _props$showCheckedStr = props.showCheckedStrategy,\n      showCheckedStrategy = _props$showCheckedStr === void 0 ? SHOW_CHILD : _props$showCheckedStr,\n      treeNodeLabelProp = props.treeNodeLabelProp,\n      multiple = props.multiple,\n      treeCheckable = props.treeCheckable,\n      treeCheckStrictly = props.treeCheckStrictly,\n      labelInValue = props.labelInValue,\n      fieldNames = props.fieldNames,\n      treeDataSimpleMode = props.treeDataSimpleMode,\n      treeData = props.treeData,\n      children = props.children,\n      loadData = props.loadData,\n      treeLoadedKeys = props.treeLoadedKeys,\n      onTreeLoad = props.onTreeLoad,\n      treeDefaultExpandAll = props.treeDefaultExpandAll,\n      treeExpandedKeys = props.treeExpandedKeys,\n      treeDefaultExpandedKeys = props.treeDefaultExpandedKeys,\n      onTreeExpand = props.onTreeExpand,\n      treeExpandAction = props.treeExpandAction,\n      virtual = props.virtual,\n      _props$listHeight = props.listHeight,\n      listHeight = _props$listHeight === void 0 ? 200 : _props$listHeight,\n      _props$listItemHeight = props.listItemHeight,\n      listItemHeight = _props$listItemHeight === void 0 ? 20 : _props$listItemHeight,\n      onDropdownVisibleChange = props.onDropdownVisibleChange,\n      _props$dropdownMatchS = props.dropdownMatchSelectWidth,\n      dropdownMatchSelectWidth = _props$dropdownMatchS === void 0 ? true : _props$dropdownMatchS,\n      treeLine = props.treeLine,\n      treeIcon = props.treeIcon,\n      showTreeIcon = props.showTreeIcon,\n      switcherIcon = props.switcherIcon,\n      treeMotion = props.treeMotion,\n      restProps = _objectWithoutProperties(props, _excluded);\n\n  var mergedId = useId(id);\n  var treeConduction = treeCheckable && !treeCheckStrictly;\n  var mergedCheckable = treeCheckable || treeCheckStrictly;\n  var mergedLabelInValue = treeCheckStrictly || labelInValue;\n  var mergedMultiple = mergedCheckable || multiple;\n\n  var _useMergedState = useMergedState(defaultValue, {\n    value: value\n  }),\n      _useMergedState2 = _slicedToArray(_useMergedState, 2),\n      internalValue = _useMergedState2[0],\n      setInternalValue = _useMergedState2[1]; // ========================== Warning ===========================\n\n\n  if (process.env.NODE_ENV !== 'production') {\n    warningProps(props);\n  } // ========================= FieldNames =========================\n\n\n  var mergedFieldNames = React.useMemo(function () {\n    return fillFieldNames(fieldNames);\n  },\n  /* eslint-disable react-hooks/exhaustive-deps */\n  [JSON.stringify(fieldNames)]\n  /* eslint-enable react-hooks/exhaustive-deps */\n  ); // =========================== Search ===========================\n\n  var _useMergedState3 = useMergedState('', {\n    value: searchValue !== undefined ? searchValue : inputValue,\n    postState: function postState(search) {\n      return search || '';\n    }\n  }),\n      _useMergedState4 = _slicedToArray(_useMergedState3, 2),\n      mergedSearchValue = _useMergedState4[0],\n      setSearchValue = _useMergedState4[1];\n\n  var onInternalSearch = function onInternalSearch(searchText) {\n    setSearchValue(searchText);\n    onSearch === null || onSearch === void 0 ? void 0 : onSearch(searchText);\n  }; // ============================ Data ============================\n  // `useTreeData` only do convert of `children` or `simpleMode`.\n  // Else will return origin `treeData` for perf consideration.\n  // Do not do anything to loop the data.\n\n\n  var mergedTreeData = useTreeData(treeData, children, treeDataSimpleMode);\n\n  var _useDataEntities = useDataEntities(mergedTreeData, mergedFieldNames),\n      keyEntities = _useDataEntities.keyEntities,\n      valueEntities = _useDataEntities.valueEntities;\n  /** Get `missingRawValues` which not exist in the tree yet */\n\n\n  var splitRawValues = React.useCallback(function (newRawValues) {\n    var missingRawValues = [];\n    var existRawValues = []; // Keep missing value in the cache\n\n    newRawValues.forEach(function (val) {\n      if (valueEntities.has(val)) {\n        existRawValues.push(val);\n      } else {\n        missingRawValues.push(val);\n      }\n    });\n    return {\n      missingRawValues: missingRawValues,\n      existRawValues: existRawValues\n    };\n  }, [valueEntities]); // Filtered Tree\n\n  var filteredTreeData = useFilterTreeData(mergedTreeData, mergedSearchValue, {\n    fieldNames: mergedFieldNames,\n    treeNodeFilterProp: treeNodeFilterProp,\n    filterTreeNode: filterTreeNode\n  }); // =========================== Label ============================\n\n  var getLabel = React.useCallback(function (item) {\n    if (item) {\n      if (treeNodeLabelProp) {\n        return item[treeNodeLabelProp];\n      } // Loop from fieldNames\n\n\n      var titleList = mergedFieldNames._title;\n\n      for (var i = 0; i < titleList.length; i += 1) {\n        var title = item[titleList[i]];\n\n        if (title !== undefined) {\n          return title;\n        }\n      }\n    }\n  }, [mergedFieldNames, treeNodeLabelProp]); // ========================= Wrap Value =========================\n\n  var toLabeledValues = React.useCallback(function (draftValues) {\n    var values = toArray(draftValues);\n    return values.map(function (val) {\n      if (isRawValue(val)) {\n        return {\n          value: val\n        };\n      }\n\n      return val;\n    });\n  }, []);\n  var convert2LabelValues = React.useCallback(function (draftValues) {\n    var values = toLabeledValues(draftValues);\n    return values.map(function (item) {\n      var rawLabel = item.label;\n      var rawValue = item.value,\n          rawHalfChecked = item.halfChecked;\n      var rawDisabled;\n      var entity = valueEntities.get(rawValue); // Fill missing label & status\n\n      if (entity) {\n        var _rawLabel;\n\n        rawLabel = (_rawLabel = rawLabel) !== null && _rawLabel !== void 0 ? _rawLabel : getLabel(entity.node);\n        rawDisabled = entity.node.disabled;\n      } else if (rawLabel === undefined) {\n        // We try to find in current `labelInValue` value\n        var labelInValueItem = toLabeledValues(internalValue).find(function (labeledItem) {\n          return labeledItem.value === rawValue;\n        });\n        rawLabel = labelInValueItem.label;\n      }\n\n      return {\n        label: rawLabel,\n        value: rawValue,\n        halfChecked: rawHalfChecked,\n        disabled: rawDisabled\n      };\n    });\n  }, [valueEntities, getLabel, toLabeledValues, internalValue]); // =========================== Values ===========================\n\n  var rawMixedLabeledValues = React.useMemo(function () {\n    return toLabeledValues(internalValue);\n  }, [toLabeledValues, internalValue]); // Split value into full check and half check\n\n  var _React$useMemo = React.useMemo(function () {\n    var fullCheckValues = [];\n    var halfCheckValues = [];\n    rawMixedLabeledValues.forEach(function (item) {\n      if (item.halfChecked) {\n        halfCheckValues.push(item);\n      } else {\n        fullCheckValues.push(item);\n      }\n    });\n    return [fullCheckValues, halfCheckValues];\n  }, [rawMixedLabeledValues]),\n      _React$useMemo2 = _slicedToArray(_React$useMemo, 2),\n      rawLabeledValues = _React$useMemo2[0],\n      rawHalfLabeledValues = _React$useMemo2[1]; // const [mergedValues] = useCache(rawLabeledValues);\n\n\n  var rawValues = React.useMemo(function () {\n    return rawLabeledValues.map(function (item) {\n      return item.value;\n    });\n  }, [rawLabeledValues]); // Convert value to key. Will fill missed keys for conduct check.\n\n  var _useCheckedKeys = useCheckedKeys(rawLabeledValues, rawHalfLabeledValues, treeConduction, keyEntities),\n      _useCheckedKeys2 = _slicedToArray(_useCheckedKeys, 2),\n      rawCheckedValues = _useCheckedKeys2[0],\n      rawHalfCheckedValues = _useCheckedKeys2[1]; // Convert rawCheckedKeys to check strategy related values\n\n\n  var displayValues = React.useMemo(function () {\n    // Collect keys which need to show\n    var displayKeys = formatStrategyValues(rawCheckedValues, showCheckedStrategy, keyEntities, mergedFieldNames); // Convert to value and filled with label\n\n    var values = displayKeys.map(function (key) {\n      var _keyEntities$key$node, _keyEntities$key, _keyEntities$key$node2;\n\n      return (_keyEntities$key$node = (_keyEntities$key = keyEntities[key]) === null || _keyEntities$key === void 0 ? void 0 : (_keyEntities$key$node2 = _keyEntities$key.node) === null || _keyEntities$key$node2 === void 0 ? void 0 : _keyEntities$key$node2[mergedFieldNames.value]) !== null && _keyEntities$key$node !== void 0 ? _keyEntities$key$node : key;\n    }); // Back fill with origin label\n\n    var labeledValues = values.map(function (val) {\n      var targetItem = rawLabeledValues.find(function (item) {\n        return item.value === val;\n      });\n      return {\n        value: val,\n        label: targetItem === null || targetItem === void 0 ? void 0 : targetItem.label\n      };\n    });\n    var rawDisplayValues = convert2LabelValues(labeledValues);\n    var firstVal = rawDisplayValues[0];\n\n    if (!mergedMultiple && firstVal && isNil(firstVal.value) && isNil(firstVal.label)) {\n      return [];\n    }\n\n    return rawDisplayValues.map(function (item) {\n      var _item$label;\n\n      return _objectSpread(_objectSpread({}, item), {}, {\n        label: (_item$label = item.label) !== null && _item$label !== void 0 ? _item$label : item.value\n      });\n    });\n  }, [mergedFieldNames, mergedMultiple, rawCheckedValues, rawLabeledValues, convert2LabelValues, showCheckedStrategy, keyEntities]);\n\n  var _useCache = useCache(displayValues),\n      _useCache2 = _slicedToArray(_useCache, 1),\n      cachedDisplayValues = _useCache2[0]; // =========================== Change ===========================\n\n\n  var triggerChange = useRefFunc(function (newRawValues, extra, source) {\n    var labeledValues = convert2LabelValues(newRawValues);\n    setInternalValue(labeledValues); // Clean up if needed\n\n    if (autoClearSearchValue) {\n      setSearchValue('');\n    } // Generate rest parameters is costly, so only do it when necessary\n\n\n    if (onChange) {\n      var eventValues = newRawValues;\n\n      if (treeConduction) {\n        var formattedKeyList = formatStrategyValues(newRawValues, showCheckedStrategy, keyEntities, mergedFieldNames);\n        eventValues = formattedKeyList.map(function (key) {\n          var entity = valueEntities.get(key);\n          return entity ? entity.node[mergedFieldNames.value] : key;\n        });\n      }\n\n      var _ref = extra || {\n        triggerValue: undefined,\n        selected: undefined\n      },\n          triggerValue = _ref.triggerValue,\n          selected = _ref.selected;\n\n      var returnRawValues = eventValues; // We need fill half check back\n\n      if (treeCheckStrictly) {\n        var halfValues = rawHalfLabeledValues.filter(function (item) {\n          return !eventValues.includes(item.value);\n        });\n        returnRawValues = [].concat(_toConsumableArray(returnRawValues), _toConsumableArray(halfValues));\n      }\n\n      var returnLabeledValues = convert2LabelValues(returnRawValues);\n      var additionalInfo = {\n        // [Legacy] Always return as array contains label & value\n        preValue: rawLabeledValues,\n        triggerValue: triggerValue\n      }; // [Legacy] Fill legacy data if user query.\n      // This is expansive that we only fill when user query\n      // https://github.com/react-component/tree-select/blob/fe33eb7c27830c9ac70cd1fdb1ebbe7bc679c16a/src/Select.jsx\n\n      var showPosition = true;\n\n      if (treeCheckStrictly || source === 'selection' && !selected) {\n        showPosition = false;\n      }\n\n      fillAdditionalInfo(additionalInfo, triggerValue, newRawValues, mergedTreeData, showPosition, mergedFieldNames);\n\n      if (mergedCheckable) {\n        additionalInfo.checked = selected;\n      } else {\n        additionalInfo.selected = selected;\n      }\n\n      var returnValues = mergedLabelInValue ? returnLabeledValues : returnLabeledValues.map(function (item) {\n        return item.value;\n      });\n      onChange(mergedMultiple ? returnValues : returnValues[0], mergedLabelInValue ? null : returnLabeledValues.map(function (item) {\n        return item.label;\n      }), additionalInfo);\n    }\n  }); // ========================== Options ===========================\n\n  /** Trigger by option list */\n\n  var onOptionSelect = React.useCallback(function (selectedKey, _ref2) {\n    var _node$mergedFieldName;\n\n    var selected = _ref2.selected,\n        source = _ref2.source;\n    var entity = keyEntities[selectedKey];\n    var node = entity === null || entity === void 0 ? void 0 : entity.node;\n    var selectedValue = (_node$mergedFieldName = node === null || node === void 0 ? void 0 : node[mergedFieldNames.value]) !== null && _node$mergedFieldName !== void 0 ? _node$mergedFieldName : selectedKey; // Never be falsy but keep it safe\n\n    if (!mergedMultiple) {\n      // Single mode always set value\n      triggerChange([selectedValue], {\n        selected: true,\n        triggerValue: selectedValue\n      }, 'option');\n    } else {\n      var newRawValues = selected ? [].concat(_toConsumableArray(rawValues), [selectedValue]) : rawCheckedValues.filter(function (v) {\n        return v !== selectedValue;\n      }); // Add keys if tree conduction\n\n      if (treeConduction) {\n        // Should keep missing values\n        var _splitRawValues = splitRawValues(newRawValues),\n            missingRawValues = _splitRawValues.missingRawValues,\n            existRawValues = _splitRawValues.existRawValues;\n\n        var keyList = existRawValues.map(function (val) {\n          return valueEntities.get(val).key;\n        }); // Conduction by selected or not\n\n        var checkedKeys;\n\n        if (selected) {\n          var _conductCheck = conductCheck(keyList, true, keyEntities);\n\n          checkedKeys = _conductCheck.checkedKeys;\n        } else {\n          var _conductCheck2 = conductCheck(keyList, {\n            checked: false,\n            halfCheckedKeys: rawHalfCheckedValues\n          }, keyEntities);\n\n          checkedKeys = _conductCheck2.checkedKeys;\n        } // Fill back of keys\n\n\n        newRawValues = [].concat(_toConsumableArray(missingRawValues), _toConsumableArray(checkedKeys.map(function (key) {\n          return keyEntities[key].node[mergedFieldNames.value];\n        })));\n      }\n\n      triggerChange(newRawValues, {\n        selected: selected,\n        triggerValue: selectedValue\n      }, source || 'option');\n    } // Trigger select event\n\n\n    if (selected || !mergedMultiple) {\n      onSelect === null || onSelect === void 0 ? void 0 : onSelect(selectedValue, fillLegacyProps(node));\n    } else {\n      onDeselect === null || onDeselect === void 0 ? void 0 : onDeselect(selectedValue, fillLegacyProps(node));\n    }\n  }, [splitRawValues, valueEntities, keyEntities, mergedFieldNames, mergedMultiple, rawValues, triggerChange, treeConduction, onSelect, onDeselect, rawCheckedValues, rawHalfCheckedValues]); // ========================== Dropdown ==========================\n\n  var onInternalDropdownVisibleChange = React.useCallback(function (open) {\n    if (onDropdownVisibleChange) {\n      var legacyParam = {};\n      Object.defineProperty(legacyParam, 'documentClickClose', {\n        get: function get() {\n          warning(false, 'Second param of `onDropdownVisibleChange` has been removed.');\n          return false;\n        }\n      });\n      onDropdownVisibleChange(open, legacyParam);\n    }\n  }, [onDropdownVisibleChange]); // ====================== Display Change ========================\n\n  var onDisplayValuesChange = useRefFunc(function (newValues, info) {\n    var newRawValues = newValues.map(function (item) {\n      return item.value;\n    });\n\n    if (info.type === 'clear') {\n      triggerChange(newRawValues, {}, 'selection');\n      return;\n    } // TreeSelect only have multiple mode which means display change only has remove\n\n\n    if (info.values.length) {\n      onOptionSelect(info.values[0].value, {\n        selected: false,\n        source: 'selection'\n      });\n    }\n  }); // ========================== Context ===========================\n\n  var treeSelectContext = React.useMemo(function () {\n    return {\n      virtual: virtual,\n      dropdownMatchSelectWidth: dropdownMatchSelectWidth,\n      listHeight: listHeight,\n      listItemHeight: listItemHeight,\n      treeData: filteredTreeData,\n      fieldNames: mergedFieldNames,\n      onSelect: onOptionSelect,\n      treeExpandAction: treeExpandAction\n    };\n  }, [virtual, dropdownMatchSelectWidth, listHeight, listItemHeight, filteredTreeData, mergedFieldNames, onOptionSelect, treeExpandAction]); // ======================= Legacy Context =======================\n\n  var legacyContext = React.useMemo(function () {\n    return {\n      checkable: mergedCheckable,\n      loadData: loadData,\n      treeLoadedKeys: treeLoadedKeys,\n      onTreeLoad: onTreeLoad,\n      checkedKeys: rawCheckedValues,\n      halfCheckedKeys: rawHalfCheckedValues,\n      treeDefaultExpandAll: treeDefaultExpandAll,\n      treeExpandedKeys: treeExpandedKeys,\n      treeDefaultExpandedKeys: treeDefaultExpandedKeys,\n      onTreeExpand: onTreeExpand,\n      treeIcon: treeIcon,\n      treeMotion: treeMotion,\n      showTreeIcon: showTreeIcon,\n      switcherIcon: switcherIcon,\n      treeLine: treeLine,\n      treeNodeFilterProp: treeNodeFilterProp,\n      keyEntities: keyEntities\n    };\n  }, [mergedCheckable, loadData, treeLoadedKeys, onTreeLoad, rawCheckedValues, rawHalfCheckedValues, treeDefaultExpandAll, treeExpandedKeys, treeDefaultExpandedKeys, onTreeExpand, treeIcon, treeMotion, showTreeIcon, switcherIcon, treeLine, treeNodeFilterProp, keyEntities]); // =========================== Render ===========================\n\n  return /*#__PURE__*/React.createElement(TreeSelectContext.Provider, {\n    value: treeSelectContext\n  }, /*#__PURE__*/React.createElement(LegacyContext.Provider, {\n    value: legacyContext\n  }, /*#__PURE__*/React.createElement(BaseSelect, _extends({\n    ref: ref\n  }, restProps, {\n    // >>> MISC\n    id: mergedId,\n    prefixCls: prefixCls,\n    mode: mergedMultiple ? 'multiple' : undefined // >>> Display Value\n    ,\n    displayValues: cachedDisplayValues,\n    onDisplayValuesChange: onDisplayValuesChange // >>> Search\n    ,\n    searchValue: mergedSearchValue,\n    onSearch: onInternalSearch // >>> Options\n    ,\n    OptionList: OptionList,\n    emptyOptions: !mergedTreeData.length,\n    onDropdownVisibleChange: onInternalDropdownVisibleChange,\n    dropdownMatchSelectWidth: dropdownMatchSelectWidth\n  }))));\n}); // Assign name for Debug\n\nif (process.env.NODE_ENV !== 'production') {\n  TreeSelect.displayName = 'TreeSelect';\n}\n\nvar GenericTreeSelect = TreeSelect;\nGenericTreeSelect.TreeNode = TreeNode;\nGenericTreeSelect.SHOW_ALL = SHOW_ALL;\nGenericTreeSelect.SHOW_PARENT = SHOW_PARENT;\nGenericTreeSelect.SHOW_CHILD = SHOW_CHILD;\nexport default GenericTreeSelect;"],"names":["LegacySelectContext","React.createContext","TreeSelectContext","toArray","value","fillFieldNames","fieldNames","_ref","label","children","mergedValue","isCheckDisabled","node","getAllKeys","treeData","keys","dig","list","item","isNil","val","HIDDEN_STYLE","OptionList","_","ref","_useBaseProps","useBaseProps","prefixCls","multiple","searchValue","toggleOpen","open","notFoundContent","_React$useContext","React.useContext","virtual","listHeight","listItemHeight","onSelect","dropdownMatchSelectWidth","treeExpandAction","_React$useContext2","LegacyContext","checkable","checkedKeys","halfCheckedKeys","treeExpandedKeys","treeDefaultExpandAll","treeDefaultExpandedKeys","onTreeExpand","treeIcon","showTreeIcon","switcherIcon","treeLine","treeNodeFilterProp","loadData","treeLoadedKeys","treeMotion","onTreeLoad","keyEntities","treeRef","React.useRef","memoTreeData","useMemo","prev","next","mergedCheckedKeys","React.useMemo","React.useEffect","_treeRef$current","lowerSearchValue","filterTreeNode","treeNode","_React$useState","React.useState","_React$useState2","_slicedToArray","expandedKeys","setExpandedKeys","_React$useState3","_React$useState4","searchExpandedKeys","setSearchExpandedKeys","mergedExpandedKeys","_toConsumableArray","onInternalExpand","onListMouseDown","event","onInternalSelect","__","info","_React$useState5","_React$useState6","activeKey","setActiveKey","activeEntity","React.useImperativeHandle","_treeRef$current2","_treeRef$current3","which","KeyCode","selectable","React.createElement","treeProps","Tree","_extends","RefOptionList","React.forwardRef","TreeNode","SHOW_ALL","SHOW_PARENT","SHOW_CHILD","formatStrategyValues","values","strategy","valueSet","key","entity","_ref2","parent","_excluded","convertChildrenToData","nodes","React.isValidElement","_ref$props","restProps","_objectWithoutProperties","data","_objectSpread","childData","fillLegacyProps","dataNode","cloneNode","warning","fillAdditionalInfo","extra","triggerValue","checkedValues","showPosition","triggerNode","nodeList","generateMap","level","parentIncluded","option","index","pos","included","child","checkedNode","_ref3","val1","val2","index1","index2","_ref4","parseSimpleTreeData","id","pId","rootPId","keyNodes","rootNodeList","clone","parentKey","useTreeData","simpleMode","useCache","cacheRef","valueLabels","valueLabelsCache","filledValues","_item$label","mergedLabel","useRefFunc","callback","funcRef","cacheFn","React.useCallback","useDataEntities","collection","convertDataToEntities","wrapper","useCheckedKeys","rawLabeledValues","rawHalfCheckedValues","treeConduction","missingValues","_conductCheck","conductCheck","useFilterTreeData","fieldChildren","filterOptionFunc","upperStr","keepAll","match","childList","_defineProperty","isRawValue","_typeof","TreeSelect","props","_props$prefixCls","defaultValue","onChange","onDeselect","inputValue","onSearch","_props$autoClearSearc","autoClearSearchValue","_props$treeNodeFilter","_props$showCheckedStr","showCheckedStrategy","treeNodeLabelProp","treeCheckable","treeCheckStrictly","labelInValue","treeDataSimpleMode","_props$listHeight","_props$listItemHeight","onDropdownVisibleChange","_props$dropdownMatchS","mergedId","useId","mergedCheckable","mergedLabelInValue","mergedMultiple","_useMergedState","useMergedState","_useMergedState2","internalValue","setInternalValue","mergedFieldNames","_useMergedState3","search","_useMergedState4","mergedSearchValue","setSearchValue","onInternalSearch","searchText","mergedTreeData","_useDataEntities","valueEntities","splitRawValues","newRawValues","missingRawValues","existRawValues","filteredTreeData","getLabel","titleList","i","title","toLabeledValues","draftValues","convert2LabelValues","rawLabel","rawValue","rawHalfChecked","rawDisabled","_rawLabel","labelInValueItem","labeledItem","rawMixedLabeledValues","_React$useMemo","fullCheckValues","halfCheckValues","_React$useMemo2","rawHalfLabeledValues","rawValues","_useCheckedKeys","_useCheckedKeys2","rawCheckedValues","displayValues","displayKeys","_keyEntities$key$node","_keyEntities$key","_keyEntities$key$node2","labeledValues","targetItem","rawDisplayValues","firstVal","_useCache","_useCache2","cachedDisplayValues","triggerChange","source","eventValues","formattedKeyList","selected","returnRawValues","halfValues","returnLabeledValues","additionalInfo","returnValues","onOptionSelect","selectedKey","_node$mergedFieldName","selectedValue","v","_splitRawValues","keyList","_conductCheck2","onInternalDropdownVisibleChange","legacyParam","onDisplayValuesChange","newValues","treeSelectContext","legacyContext","BaseSelect","GenericTreeSelect"],"mappings":"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"}