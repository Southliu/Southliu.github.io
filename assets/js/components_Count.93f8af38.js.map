{"version":3,"file":"components_Count.93f8af38.js","sources":["../../../src/components/Count/index.tsx"],"sourcesContent":["import { useState, useEffect } from 'react'\nimport { amountFormatter } from '@/utils/helper'\n\ninterface IProps extends React.HTMLAttributes<HTMLDivElement> {\n  prefix?: string;\n  start: number;\n  end: number;\n}\n\nfunction Count(props: IProps) {\n  const { prefix, start, end } = props\n  const [num, setNum] = useState(start)\n  const [timer, setTimer] = useState<NodeJS.Timer | null>(null)\n\n  useEffect(() => {\n    const count = end - start\n    const time = 2 * 60\n    const add = Math.floor(count / time) || 1\n    setTimer(setInterval(() => {\n      setNum(num => num + add)\n    }))\n  }, [end, start])\n\n  useEffect(() => {\n    if (num >= end) {\n      if (timer) {\n        clearInterval(timer)\n        setTimer(null)\n      }\n\n      setNum(end)\n    }\n  }, [end, num, timer])\n\n  useEffect(() => {\n    return () => {\n      if (timer) {\n        clearInterval(timer)\n        setTimer(null)\n      }\n    }\n  }, [timer])\n\n  return (\n    <span>{ prefix }{ amountFormatter(num) }</span>\n  )\n}\n\nexport default Count"],"names":["Count","props","prefix","start","end","num","setNum","useState","timer","setTimer","useEffect","count","time","add","amountFormatter"],"mappings":"6IASA,SAASA,EAAMC,EAAe,CAC5B,KAAM,CAAE,OAAAC,EAAQ,MAAAC,EAAO,IAAAC,CAAA,EAAQH,EACzB,CAACI,EAAKC,CAAM,EAAIC,WAASJ,CAAK,EAC9B,CAACK,EAAOC,CAAQ,EAAIF,WAA8B,IAAI,EAE5DG,OAAAA,EAAAA,UAAU,IAAM,CACd,MAAMC,EAAQP,EAAMD,EACdS,EAAO,EAAI,GACXC,EAAM,KAAK,MAAMF,EAAQC,CAAI,GAAK,EACxCH,EAAS,YAAY,IAAM,CAClBH,EAAAD,GAAOA,EAAMQ,CAAG,CACxB,CAAA,CAAC,CAAA,EACD,CAACT,EAAKD,CAAK,CAAC,EAEfO,EAAAA,UAAU,IAAM,CACVL,GAAOD,IACLI,IACF,cAAcA,CAAK,EACnBC,EAAS,IAAI,GAGfH,EAAOF,CAAG,EAEX,EAAA,CAACA,EAAKC,EAAKG,CAAK,CAAC,EAEpBE,EAAAA,UAAU,IACD,IAAM,CACPF,IACF,cAAcA,CAAK,EACnBC,EAAS,IAAI,EACf,EAED,CAACD,CAAK,CAAC,IAGP,OAAO,CAAA,SAAA,CAAAN,EAAUY,EAAgBT,CAAG,CAAG,CAAA,CAAA,CAE5C"}