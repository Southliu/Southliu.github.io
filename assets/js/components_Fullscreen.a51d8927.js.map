{"version":3,"file":"components_Fullscreen.a51d8927.js","sources":["../../../src/stores/public.ts","../../../src/hooks/useFullscreen.ts","../../../src/components/Fullscreen/index.tsx"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nexport type IThemeType = 'dark' | 'light'\n\nexport const publicSlice = createSlice({\n  name: 'public',\n  initialState: {\n    theme: 'light' as IThemeType, // 主题\n    isFullscreen: false, // 是否全屏\n    isRefresh: false, // 重新加载\n    isRefreshPage: false // 重新加载页面\n  },\n  reducers: {\n    /** 设置主题 */\n    setThemeValue: (state, action) => {\n      state.theme = action.payload\n    },\n    /** 设置全屏 */\n    setFullscreen: (state, action) => {\n      state.isFullscreen = action.payload\n    },\n    /** 设置重新加载 */\n    setRefresh: (state, action) => {\n      state.isRefresh = action.payload\n    },\n    /** 设置重新加载页面 */\n    setRefreshPage: (state, action) => {\n      state.isRefreshPage = action.payload\n    }\n  }\n})\n\nexport const {\n  setThemeValue,\n  setFullscreen,\n  setRefresh,\n  setRefreshPage\n} = publicSlice.actions\n\nexport default publicSlice.reducer","import type { AppDispatch, RootState } from \"@/stores\"\nimport { setFullscreen } from \"@/stores/public\"\nimport { useDispatch, useSelector } from \"react-redux\"\n\nexport function useFullscreen() {\n  const dispatch: AppDispatch = useDispatch()\n  const isFullscreen = useSelector((state: RootState) => state.public.isFullscreen)\n\n  /** 切换全屏 */\n  const toggleFullscreen = () => {\n    // 全屏\n    if(!isFullscreen && document.documentElement?.requestFullscreen) {\n      document.documentElement.requestFullscreen()\n      dispatch(setFullscreen(true))\n      return true\n    }\n    // 退出全屏\n    if (isFullscreen && document?.exitFullscreen) {\n      document.exitFullscreen()\n      dispatch(setFullscreen(false))\n      return true\n    }\n  }\n\n  return [isFullscreen, toggleFullscreen] as const\n}\n","import { Tooltip } from 'antd'\nimport { Icon } from '@iconify/react'\nimport { useFullscreen } from '@/hooks/useFullscreen'\n\n/**\n * @description: 全屏组件\n */\nfunction Fullscreen() {\n  const [isFullscreen, toggleFullscreen] = useFullscreen()\n\n  return (\n    <Tooltip title={ isFullscreen ? '退出全屏' : '全屏' }>\n      <div\n        className=\"flex items-center justify-center text-lg mr-3 cursor-pointer\"\n        onClick={toggleFullscreen}\n      >\n        { isFullscreen && <Icon icon=\"gridicons-fullscreen-exit\" /> }\n        { !isFullscreen && <Icon icon=\"gridicons-fullscreen\" /> }\n      </div>\n    </Tooltip>\n  )\n}\n\nexport default Fullscreen"],"names":["publicSlice","createSlice","state","action","setThemeValue","setFullscreen","setRefresh","setRefreshPage","publicReducer","useFullscreen","dispatch","useDispatch","isFullscreen","useSelector","_a","Fullscreen","toggleFullscreen","jsx","Tooltip","jsxs","Icon"],"mappings":"sPAIO,MAAMA,EAAcC,EAAY,CACrC,KAAM,SACN,aAAc,CACZ,MAAO,QACP,aAAc,GACd,UAAW,GACX,cAAe,EACjB,EACA,SAAU,CAER,cAAe,CAACC,EAAOC,IAAW,CAChCD,EAAM,MAAQC,EAAO,OACvB,EAEA,cAAe,CAACD,EAAOC,IAAW,CAChCD,EAAM,aAAeC,EAAO,OAC9B,EAEA,WAAY,CAACD,EAAOC,IAAW,CAC7BD,EAAM,UAAYC,EAAO,OAC3B,EAEA,eAAgB,CAACD,EAAOC,IAAW,CACjCD,EAAM,cAAgBC,EAAO,OAC/B,CACF,CACF,CAAC,EAEY,CACX,cAAAC,EACA,cAAAC,EACA,WAAAC,EACA,eAAAC,CACF,EAAIP,EAAY,QAEDQ,EAAAR,EAAY,QCnCpB,SAASS,GAAgB,CAC9B,MAAMC,EAAwBC,IACxBC,EAAeC,EAAaX,GAAqBA,EAAM,OAAO,YAAY,EAkBzE,MAAA,CAACU,EAfiB,IAAM,OAE7B,GAAG,CAACA,KAAgBE,EAAA,SAAS,kBAAT,MAAAA,EAA0B,mBAC5C,gBAAS,gBAAgB,oBAChBJ,EAAAL,EAAc,EAAI,CAAC,EACrB,GAGL,GAAAO,IAAgB,yBAAU,gBAC5B,gBAAS,eAAe,EACfF,EAAAL,EAAc,EAAK,CAAC,EACtB,EACT,CAGoC,CACxC,CClBA,SAASU,GAAa,CACpB,KAAM,CAACH,EAAcI,CAAgB,EAAIP,EAAc,EAEvD,OACGQ,EAAAC,EAAA,CAAQ,MAAQN,EAAe,OAAS,KACvC,SAAAO,EAAC,MAAA,CACC,UAAU,+DACV,QAASH,EAEP,SAAA,CAAgBJ,GAAAK,EAACG,EAAK,CAAA,KAAK,2BAA4B,CAAA,EACvD,CAACR,GAAiBK,EAAAG,EAAA,CAAK,KAAK,sBAAuB,CAAA,CAAA,CAAA,CAEzD,CAAA,CAAA,CAEJ"}