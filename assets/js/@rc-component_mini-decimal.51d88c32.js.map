{"version":3,"file":"@rc-component_mini-decimal.51d88c32.js","sources":["../../../node_modules/.pnpm/@rc-component+mini-decimal@1.0.1/node_modules/@rc-component/mini-decimal/es/supportUtil.js","../../../node_modules/.pnpm/@rc-component+mini-decimal@1.0.1/node_modules/@rc-component/mini-decimal/es/numberUtil.js","../../../node_modules/.pnpm/@rc-component+mini-decimal@1.0.1/node_modules/@rc-component/mini-decimal/es/MiniDecimal.js"],"sourcesContent":["export function supportBigInt() {\n  return typeof BigInt === 'function';\n}","import { supportBigInt } from \"./supportUtil\";\n/**\n * Format string number to readable number\n */\n\nexport function trimNumber(numStr) {\n  var str = numStr.trim();\n  var negative = str.startsWith('-');\n\n  if (negative) {\n    str = str.slice(1);\n  }\n\n  str = str // Remove decimal 0. `1.000` => `1.`, `1.100` => `1.1`\n  .replace(/(\\.\\d*[^0])0*$/, '$1') // Remove useless decimal. `1.` => `1`\n  .replace(/\\.0*$/, '') // Remove integer 0. `0001` => `1`, 000.1' => `.1`\n  .replace(/^0+/, '');\n\n  if (str.startsWith('.')) {\n    str = \"0\".concat(str);\n  }\n\n  var trimStr = str || '0';\n  var splitNumber = trimStr.split('.');\n  var integerStr = splitNumber[0] || '0';\n  var decimalStr = splitNumber[1] || '0';\n\n  if (integerStr === '0' && decimalStr === '0') {\n    negative = false;\n  }\n\n  var negativeStr = negative ? '-' : '';\n  return {\n    negative: negative,\n    negativeStr: negativeStr,\n    trimStr: trimStr,\n    integerStr: integerStr,\n    decimalStr: decimalStr,\n    fullStr: \"\".concat(negativeStr).concat(trimStr)\n  };\n}\nexport function isE(number) {\n  var str = String(number);\n  return !Number.isNaN(Number(str)) && str.includes('e');\n}\n/**\n * [Legacy] Convert 1e-9 to 0.000000001.\n * This may lose some precision if user really want 1e-9.\n */\n\nexport function getNumberPrecision(number) {\n  var numStr = String(number);\n\n  if (isE(number)) {\n    var precision = Number(numStr.slice(numStr.indexOf('e-') + 2));\n    var decimalMatch = numStr.match(/\\.(\\d+)/);\n\n    if (decimalMatch !== null && decimalMatch !== void 0 && decimalMatch[1]) {\n      precision += decimalMatch[1].length;\n    }\n\n    return precision;\n  }\n\n  return numStr.includes('.') && validateNumber(numStr) ? numStr.length - numStr.indexOf('.') - 1 : 0;\n}\n/**\n * Convert number (includes scientific notation) to -xxx.yyy format\n */\n\nexport function num2str(number) {\n  var numStr = String(number);\n\n  if (isE(number)) {\n    if (number > Number.MAX_SAFE_INTEGER) {\n      return String(supportBigInt() ? BigInt(number).toString() : Number.MAX_SAFE_INTEGER);\n    }\n\n    if (number < Number.MIN_SAFE_INTEGER) {\n      return String(supportBigInt() ? BigInt(number).toString() : Number.MIN_SAFE_INTEGER);\n    }\n\n    numStr = number.toFixed(getNumberPrecision(numStr));\n  }\n\n  return trimNumber(numStr).fullStr;\n}\nexport function validateNumber(num) {\n  if (typeof num === 'number') {\n    return !Number.isNaN(num);\n  } // Empty\n\n\n  if (!num) {\n    return false;\n  }\n\n  return (// Normal type: 11.28\n    /^\\s*-?\\d+(\\.\\d+)?\\s*$/.test(num) || // Pre-number: 1.\n    /^\\s*-?\\d+\\.\\s*$/.test(num) || // Post-number: .1\n    /^\\s*-?\\.\\d+\\s*$/.test(num)\n  );\n}","import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\n/* eslint-disable max-classes-per-file */\nimport { getNumberPrecision, isE, num2str, trimNumber, validateNumber } from \"./numberUtil\";\nimport { supportBigInt } from \"./supportUtil\";\n\nfunction isEmpty(value) {\n  return !value && value !== 0 && !Number.isNaN(value) || !String(value).trim();\n}\n\n/**\n * We can remove this when IE not support anymore\n */\nexport var NumberDecimal = /*#__PURE__*/function () {\n  function NumberDecimal(value) {\n    _classCallCheck(this, NumberDecimal);\n\n    _defineProperty(this, \"origin\", '');\n\n    _defineProperty(this, \"number\", void 0);\n\n    _defineProperty(this, \"empty\", void 0);\n\n    if (isEmpty(value)) {\n      this.empty = true;\n      return;\n    }\n\n    this.origin = String(value);\n    this.number = Number(value);\n  }\n\n  _createClass(NumberDecimal, [{\n    key: \"negate\",\n    value: function negate() {\n      return new NumberDecimal(-this.toNumber());\n    }\n  }, {\n    key: \"add\",\n    value: function add(value) {\n      if (this.isInvalidate()) {\n        return new NumberDecimal(value);\n      }\n\n      var target = Number(value);\n\n      if (Number.isNaN(target)) {\n        return this;\n      }\n\n      var number = this.number + target; // [Legacy] Back to safe integer\n\n      if (number > Number.MAX_SAFE_INTEGER) {\n        return new NumberDecimal(Number.MAX_SAFE_INTEGER);\n      }\n\n      if (number < Number.MIN_SAFE_INTEGER) {\n        return new NumberDecimal(Number.MIN_SAFE_INTEGER);\n      }\n\n      var maxPrecision = Math.max(getNumberPrecision(this.number), getNumberPrecision(target));\n      return new NumberDecimal(number.toFixed(maxPrecision));\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.empty;\n    }\n  }, {\n    key: \"isNaN\",\n    value: function isNaN() {\n      return Number.isNaN(this.number);\n    }\n  }, {\n    key: \"isInvalidate\",\n    value: function isInvalidate() {\n      return this.isEmpty() || this.isNaN();\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(target) {\n      return this.toNumber() === (target === null || target === void 0 ? void 0 : target.toNumber());\n    }\n  }, {\n    key: \"lessEquals\",\n    value: function lessEquals(target) {\n      return this.add(target.negate().toString()).toNumber() <= 0;\n    }\n  }, {\n    key: \"toNumber\",\n    value: function toNumber() {\n      return this.number;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var safe = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (!safe) {\n        return this.origin;\n      }\n\n      if (this.isInvalidate()) {\n        return '';\n      }\n\n      return num2str(this.number);\n    }\n  }]);\n\n  return NumberDecimal;\n}();\nexport var BigIntDecimal = /*#__PURE__*/function () {\n  /** BigInt will convert `0009` to `9`. We need record the len of decimal */\n  function BigIntDecimal(value) {\n    _classCallCheck(this, BigIntDecimal);\n\n    _defineProperty(this, \"origin\", '');\n\n    _defineProperty(this, \"negative\", void 0);\n\n    _defineProperty(this, \"integer\", void 0);\n\n    _defineProperty(this, \"decimal\", void 0);\n\n    _defineProperty(this, \"decimalLen\", void 0);\n\n    _defineProperty(this, \"empty\", void 0);\n\n    _defineProperty(this, \"nan\", void 0);\n\n    if (isEmpty(value)) {\n      this.empty = true;\n      return;\n    }\n\n    this.origin = String(value); // Act like Number convert\n\n    if (value === '-' || Number.isNaN(value)) {\n      this.nan = true;\n      return;\n    }\n\n    var mergedValue = value; // We need convert back to Number since it require `toFixed` to handle this\n\n    if (isE(mergedValue)) {\n      mergedValue = Number(mergedValue);\n    }\n\n    mergedValue = typeof mergedValue === 'string' ? mergedValue : num2str(mergedValue);\n\n    if (validateNumber(mergedValue)) {\n      var trimRet = trimNumber(mergedValue);\n      this.negative = trimRet.negative;\n      var numbers = trimRet.trimStr.split('.');\n      this.integer = BigInt(numbers[0]);\n      var decimalStr = numbers[1] || '0';\n      this.decimal = BigInt(decimalStr);\n      this.decimalLen = decimalStr.length;\n    } else {\n      this.nan = true;\n    }\n  }\n\n  _createClass(BigIntDecimal, [{\n    key: \"getMark\",\n    value: function getMark() {\n      return this.negative ? '-' : '';\n    }\n  }, {\n    key: \"getIntegerStr\",\n    value: function getIntegerStr() {\n      return this.integer.toString();\n    }\n  }, {\n    key: \"getDecimalStr\",\n    value: function getDecimalStr() {\n      return this.decimal.toString().padStart(this.decimalLen, '0');\n    }\n    /**\n     * Align BigIntDecimal with same decimal length. e.g. 12.3 + 5 = 1230000\n     * This is used for add function only.\n     */\n\n  }, {\n    key: \"alignDecimal\",\n    value: function alignDecimal(decimalLength) {\n      var str = \"\".concat(this.getMark()).concat(this.getIntegerStr()).concat(this.getDecimalStr().padEnd(decimalLength, '0'));\n      return BigInt(str);\n    }\n  }, {\n    key: \"negate\",\n    value: function negate() {\n      var clone = new BigIntDecimal(this.toString());\n      clone.negative = !clone.negative;\n      return clone;\n    }\n  }, {\n    key: \"add\",\n    value: function add(value) {\n      if (this.isInvalidate()) {\n        return new BigIntDecimal(value);\n      }\n\n      var offset = new BigIntDecimal(value);\n\n      if (offset.isInvalidate()) {\n        return this;\n      }\n\n      var maxDecimalLength = Math.max(this.getDecimalStr().length, offset.getDecimalStr().length);\n      var myAlignedDecimal = this.alignDecimal(maxDecimalLength);\n      var offsetAlignedDecimal = offset.alignDecimal(maxDecimalLength);\n      var valueStr = (myAlignedDecimal + offsetAlignedDecimal).toString(); // We need fill string length back to `maxDecimalLength` to avoid parser failed\n\n      var _trimNumber = trimNumber(valueStr),\n          negativeStr = _trimNumber.negativeStr,\n          trimStr = _trimNumber.trimStr;\n\n      var hydrateValueStr = \"\".concat(negativeStr).concat(trimStr.padStart(maxDecimalLength + 1, '0'));\n      return new BigIntDecimal(\"\".concat(hydrateValueStr.slice(0, -maxDecimalLength), \".\").concat(hydrateValueStr.slice(-maxDecimalLength)));\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.empty;\n    }\n  }, {\n    key: \"isNaN\",\n    value: function isNaN() {\n      return this.nan;\n    }\n  }, {\n    key: \"isInvalidate\",\n    value: function isInvalidate() {\n      return this.isEmpty() || this.isNaN();\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(target) {\n      return this.toString() === (target === null || target === void 0 ? void 0 : target.toString());\n    }\n  }, {\n    key: \"lessEquals\",\n    value: function lessEquals(target) {\n      return this.add(target.negate().toString()).toNumber() <= 0;\n    }\n  }, {\n    key: \"toNumber\",\n    value: function toNumber() {\n      if (this.isNaN()) {\n        return NaN;\n      }\n\n      return Number(this.toString());\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var safe = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (!safe) {\n        return this.origin;\n      }\n\n      if (this.isInvalidate()) {\n        return '';\n      }\n\n      return trimNumber(\"\".concat(this.getMark()).concat(this.getIntegerStr(), \".\").concat(this.getDecimalStr())).fullStr;\n    }\n  }]);\n\n  return BigIntDecimal;\n}();\nexport default function getMiniDecimal(value) {\n  // We use BigInt here.\n  // Will fallback to Number if not support.\n  if (supportBigInt()) {\n    return new BigIntDecimal(value);\n  }\n\n  return new NumberDecimal(value);\n}\n/**\n * Align the logic of toFixed to around like 1.5 => 2.\n * If set `cutOnly`, will just remove the over decimal part.\n */\n\nexport function toFixed(numStr, separatorStr, precision) {\n  var cutOnly = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n  if (numStr === '') {\n    return '';\n  }\n\n  var _trimNumber2 = trimNumber(numStr),\n      negativeStr = _trimNumber2.negativeStr,\n      integerStr = _trimNumber2.integerStr,\n      decimalStr = _trimNumber2.decimalStr;\n\n  var precisionDecimalStr = \"\".concat(separatorStr).concat(decimalStr);\n  var numberWithoutDecimal = \"\".concat(negativeStr).concat(integerStr);\n\n  if (precision >= 0) {\n    // We will get last + 1 number to check if need advanced number\n    var advancedNum = Number(decimalStr[precision]);\n\n    if (advancedNum >= 5 && !cutOnly) {\n      var advancedDecimal = getMiniDecimal(numStr).add(\"\".concat(negativeStr, \"0.\").concat('0'.repeat(precision)).concat(10 - advancedNum));\n      return toFixed(advancedDecimal.toString(), separatorStr, precision, cutOnly);\n    }\n\n    if (precision === 0) {\n      return numberWithoutDecimal;\n    }\n\n    return \"\".concat(numberWithoutDecimal).concat(separatorStr).concat(decimalStr.padEnd(precision, '0').slice(0, precision));\n  }\n\n  if (precisionDecimalStr === '.0') {\n    return numberWithoutDecimal;\n  }\n\n  return \"\".concat(numberWithoutDecimal).concat(precisionDecimalStr);\n}"],"names":["supportBigInt","trimNumber","numStr","str","negative","trimStr","splitNumber","integerStr","decimalStr","negativeStr","isE","number","getNumberPrecision","precision","decimalMatch","validateNumber","num2str","num","isEmpty","value","NumberDecimal","_classCallCheck","_defineProperty","_createClass","target","maxPrecision","safe","BigIntDecimal","mergedValue","trimRet","numbers","decimalLength","clone","offset","maxDecimalLength","myAlignedDecimal","offsetAlignedDecimal","valueStr","_trimNumber","hydrateValueStr","getMiniDecimal","toFixed","separatorStr","cutOnly","_trimNumber2","precisionDecimalStr","numberWithoutDecimal","advancedNum","advancedDecimal"],"mappings":"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"}